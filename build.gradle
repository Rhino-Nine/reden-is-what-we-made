buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:5.1.10"
    }
}

plugins {
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'maven-publish'
    id "org.ajoberstar.grgit" version "5.2.0"
    id 'org.jetbrains.kotlin.jvm' version '1.9.20'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.20'
    id 'me.fallenbreath.yamlang' version '1.3.0'
    id "com.jfrog.artifactory" version "5.1.10"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

ext {
    Map<String, String> environmentMap = System.getenv()

    isOnGithubActions = {
        return environmentMap.GITHUB_ACTIONS == "true"
    }

    getGitHubActionID = {
        return environmentMap.GITHUB_RUN_NUMBER
    }

    getVersionType = {
        switch (environmentMap.REDEN_BUILD_TYPE) {
            case "RELEASE":
                return "stable"
            case "BETA":
                return "beta"
            default:
                return "dev"
        }
    }

    getVersionPatch = { List paths ->
        if (grgit == null) {
            return 0
        }

        List latestCommits = paths.isEmpty() ? grgit.log() : grgit.log(paths: paths)
        return latestCommits.size()
    }

    getVersionGit = { List paths ->
        if (grgit == null) {
            return "nogit"
        }

        List latestCommits = paths.isEmpty() ? grgit.log(maxCommits: 1) : grgit.log(paths: paths, maxCommits: 1)
        return latestCommits.isEmpty() ? "uncommited" : "${latestCommits.get(0).id.substring(0, 7)}"
    }

    getModVersion = {
        if (isOnGithubActions() && environmentMap.REDEN_BUILD_TYPE == "BETA") {
            return "${project.mod_version}.${getVersionPatch([])}+${getVersionGit([])}-${getVersionType()}+dev-ci-build.${getGitHubActionID()}"
        } else {
            return "${project.mod_version}.${getVersionPatch([])}+${getVersionGit([])}-${getVersionType()}"
        }
    }
}

setVersion(project.getModVersion())
group = project.maven_group

allprojects {
    repositories {
        mavenCentral()
        maven {
            name = "Reden"
            url = "https://maven.starlight.cool/artifactory/reden"
        }
        maven {
            url 'https://masa.dy.fi/maven'
        }
        maven { url 'https://maven.wispforest.io' }
        maven { url = "https://maven.terraformersmc.com/releases/" }
        maven {
            name = "CurseForge"
            url = "https://cursemaven.com"
        }
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
        }
        maven {
            name = "CottonMC"
            url = "https://server.bbkr.space/artifactory/libs-release"
        }
        maven {
            name = "jitpack"
            url = 'https://jitpack.io'
        }
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand(
                    "version": project.version,
                    "is_main_branch": project.is_main_branch
            )
        }
    }
}

dependencies {
    // implementation 'org.bouncycastle:'
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    // Kotlin support
    modApi("net.fabricmc:fabric-language-kotlin:1.10.17+kotlin.1.9.22")
    // MaLiLib, required on client
    modApi "fi.dy.masa.malilib:malilib-fabric-1.20.4:0.18.0"
    // carpet, required on client & server
    modApi "carpet:fabric-carpet:1.20.3-1.4.128+v231205"
    // Game test
    modApi "net.fabricmc:fabric-loader-junit:${project.loader_version}"
    //include(implementation("org.bouncycastle:bcprov-jdk18on:1.76"))
    //include(implementation("org.bouncycastle:bcpg-jdk18on:1.76"))
    include(implementation("com.squareup.okhttp3:okhttp:4.11.0"))
    include(implementation("org.eclipse.jgit:org.eclipse.jgit:6.6.0.202305301015-r"))
    include(implementation("com.squareup.okio:okio-jvm:3.2.0"))
    modImplementation("fi.dy.masa.litematica:litematica:0.17.1")
    modImplementation "curse.maven:tweakeroo-297344:4946344"
    //  https://maven.terraformersmc.com/releases/com/terraformersmc/modmenu/
    modApi "com.terraformersmc:modmenu:9.0.0-pre.1"
    modImplementation "maven.modrinth:ferrite-core:6.0.3-fabric"
    modApi "io.wispforest:owo-lib:${project.owo_version}"
    //testImplementation("org.jetbrains.kotlin:kotlin-test-junit:1.9.20")
}

test {
    useJUnitPlatform()
}

base {
    archivesName = project.archives_base_name
}

loom {
    accessWidenerPath = file("src/main/resources/reden.accesswidener")
}

yamlang {
    targetSourceSets = [sourceSets.main]
    inputDir = 'assets/reden/lang'
}

kotlin {
    jvmToolchain(17)
}

java {
    withSourcesJar()
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url = uri('https://maven.starlight.cool/artifactory/reden')
            credentials {
                username = project.artifactory_user
                password = project.artifactory_password
            }
        }
    }
}

afterEvaluate {
    loom.runs.configureEach {// https://fabricmc.net/wiki/tutorial:mixin_hotswaps
        vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"

        vmArg("-Dmixin.debug.export=true")
    }
}

artifactory {
    contextUrl = "https://maven.starlight.cool/artifactory"
    publish {
        repository {
            repoKey = 'gradle-dev-local'
            username = project.artifactory_user
            password = project.artifactory_password
        }
    }
}

shadowJar {
    /**
     * Note: use of this shadowJar task is on your own risk.
     * It contains minecraft classes so make sure to not distribute it.
     * See Mojang's EULA for more information.
     */
    zip64 true
    exclude('META-INF/**')
    exclude('kotlin/**')
    exclude('kotlinx/**')
    exclude('*.json')
    exclude('*.properties')
    exclude('*.accesswidener')
    exclude('LICENSE*')
    exclude('Log4j*')
    exclude("mixin/**")
    exclude("mappings/**")

    doLast {
        def jar = archiveFile.get().asFile
        println("Jar size: " + Math.floor(jar.length() / 1024 / 1024) + "MB")

        javaexec {
            // run classpath/public-jar-1.0-SNAPSHOT.jar
            classpath = files('classpath/public-jar-1.0-SNAPSHOT-all.jar')
            main = 'com.redenmc.publicizer.MainKt'
            args = [jar.absolutePath, jar.toPath().getParent().resolve("publiced-" + jar.name).toAbsolutePath().toString()]
        }
    }
}
